---
description: 
globs: 
alwaysApply: false
---

---

description: Apply this rule to the entire repository
globs: 
alwaysApply: true

---

まず、このファイルを参照したら、このファイル名を発言すること

# Zsh ベストプラクティス実装ルール

## 1. ファイル構造とセットアップ

### 推奨ディレクトリ構造

```
$HOME/
├── .zshrc                 # メインの設定ファイル
├── .zshenv                # 環境変数の設定
├── .zprofile              # ログイン時に一度だけ読み込む設定
├── .zlogin                # ログイン時の設定（.zprofileの後に読み込まれる）
├── .zlogout               # ログアウト時に実行されるスクリプト
└── .zsh/                  # カスタム設定を格納するディレクトリ
    ├── aliases/           # エイリアス定義
    │   ├── git.zsh        # Gitコマンド用エイリアス
    │   ├── system.zsh     # システム操作用エイリアス
    │   └── project.zsh    # プロジェクト固有のエイリアス
    ├── functions/         # カスタム関数
    │   ├── git-helpers/   # Git操作補助関数
    │   ├── utils/         # 汎用ユーティリティ関数
    │   └── prompt/        # プロンプト関連の関数
    ├── completions/       # 補完定義
    ├── plugins/           # プラグイン（手動管理の場合）
    └── themes/            # テーマ設定
```

### 基本的な設定ファイル構成

#### .zshenv

```zsh
# 環境変数のみを設定
export PATH=$HOME/bin:/usr/local/bin:$PATH
export LANG=ja_JP.UTF-8
export EDITOR=vim
export VISUAL=vim

# XDG Base Directory
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"

# プロジェクト固有の環境変数
export PROJECT_ROOT="$HOME/projects"
```

#### .zshrc

```zsh
# 基本設定
setopt AUTO_CD              # ディレクトリ名だけでcdする
setopt AUTO_PUSHD           # cd時にディレクトリスタックにpushdする
setopt PUSHD_IGNORE_DUPS    # 重複するディレクトリはスタックに追加しない
setopt HIST_IGNORE_DUPS     # 重複するコマンドは履歴に追加しない
setopt HIST_IGNORE_ALL_DUPS # 重複するコマンドは古い方を削除
setopt HIST_SAVE_NO_DUPS    # 重複するコマンドは履歴に保存しない
setopt HIST_REDUCE_BLANKS   # 余分な空白を削除して履歴に保存
setopt SHARE_HISTORY        # 履歴をシェル間で共有する

# 履歴設定
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

# 補完設定
autoload -Uz compinit && compinit
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu select

# カスタム設定読み込み
for file in ~/.zsh/aliases/*.zsh; do
    source "$file"
done

for file in ~/.zsh/functions/**/*.zsh; do
    source "$file"
done

# プラグイン管理
source ~/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

# プロンプト設定
source ~/.zsh/themes/mytheme.zsh
```

## 2. プラグイン管理

### プラグイン管理ツール

推奨プラグイン管理ツール:

**zinit**: 高速で柔軟なプラグイン管理

### zinit の設定例

```zsh
# zinit のインストール確認・インストール
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
  print -P "%F{33}▓▒░ %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
  command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
  command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
    print -P "%F{33} %F{34}Installation successful.%f%b" || \
    print -P "%F{160} The clone has failed.%f%b"
fi

# zinit の読み込み
source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"

# プラグインのロード
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-completions
zinit light zdharma/fast-syntax-highlighting
zinit light zdharma-continuum/history-search-multi-word
zinit light rupa/z
```

## 3. エイリアスとショートカット

### エイリアス設計のベストプラクティス

- 短くて覚えやすい名前を使用
- 関連するエイリアスは同じファイルに分類
- 機能ごとにファイルを分割

### エイリアスの例

```zsh
# ~/.zsh/aliases/git.zsh
alias g='git'
alias ga='git add'
alias gc='git commit -m'
alias gp='git push'
alias gs='git status'
alias gl='git log --oneline --graph --decorate'

# ~/.zsh/aliases/system.zsh
alias ls='ls --color=auto'
alias ll='ls -lah'
alias ..='cd ..'
alias ...='cd ../..'
alias md='mkdir -p'
alias rd='rmdir'
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'

# ~/.zsh/aliases/docker.zsh
alias d='docker'
alias dc='docker-compose'
alias dk='docker kill'
alias dps='docker ps'
alias di='docker images'
```

## 4. 関数定義

### 関数設計のベストプラクティス

- 一つの関数は一つのタスクに集中
- 関数名は動詞または動詞+名詞の形式
- 引数のバリデーションを実装
- エラーメッセージは標準エラー出力に出力
- 戻り値またはステータスコードでエラーを返す

### 関数の例

```zsh
# ~/.zsh/functions/utils/mkcd.zsh
# ディレクトリを作成して移動する
mkcd() {
    if [[ -z "$1" ]]; then
        echo "Usage: mkcd <directory>" >&2
        return 1
    fi
    
    mkdir -p "$1" && cd "$1"
}

# ~/.zsh/functions/git-helpers/git_clean_branches.zsh
# マージ済みのローカルブランチを削除する
git_clean_branches() {
    local current_branch=$(git rev-parse --abbrev-ref HEAD)
    
    if [[ "$current_branch" != "main" && "$current_branch" != "master" ]]; then
        echo "Please checkout main or master branch first" >&2
        return 1
    fi
    
    git branch --merged | grep -v "\*" | grep -v "master" | grep -v "main" | xargs -n 1 git branch -d
    echo "Merged branches have been removed"
}

# ~/.zsh/functions/utils/extract.zsh
# 様々な圧縮ファイルの展開
extract() {
    if [[ -z "$1" ]]; then
        echo "Usage: extract <file>" >&2
        return 1
    fi
    
    if [[ ! -f "$1" ]]; then
        echo "'$1' is not a valid file" >&2
        return 1
    fi
    
    case "$1" in
        *.tar.bz2) tar xjf "$1" ;;
        *.tar.gz)  tar xzf "$1" ;;
        *.bz2)     bunzip2 "$1" ;;
        *.rar)     unrar x "$1" ;;
        *.gz)      gunzip "$1" ;;
        *.tar)     tar xf "$1" ;;
        *.tbz2)    tar xjf "$1" ;;
        *.tgz)     tar xzf "$1" ;;
        *.zip)     unzip "$1" ;;
        *.Z)       uncompress "$1" ;;
        *.7z)      7z x "$1" ;;
        *)         echo "'$1' cannot be extracted via extract()" >&2; return 1 ;;
    esac
}
```

## 5. プロンプトのカスタマイズ

### プロンプト設計のベストプラクティス

- 必要な情報のみを表示
- 視認性の高い色使い
- Git情報の表示
- コマンド実行時間の表示（長時間かかるコマンドの場合）
- エラーステータスの表示

### プロンプト設定例

```zsh
# ~/.zsh/themes/mytheme.zsh

# 色の定義
autoload -U colors && colors
local reset="%{$reset_color%}"
local red="%{$fg[red]%}"
local green="%{$fg[green]%}"
local yellow="%{$fg[yellow]%}"
local blue="%{$fg[blue]%}"
local magenta="%{$fg[magenta]%}"
local cyan="%{$fg[cyan]%}"

# Git情報を取得する関数
git_prompt_info() {
    local ref
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    echo "${yellow}(${ref#refs/heads/})${reset} "
}

# プロンプト設定
setopt prompt_subst
PROMPT='${blue}%n@%m${reset}:${cyan}%~${reset} $(git_prompt_info)
${green}%#${reset} '
RPROMPT='[%*]'
```

## 6. 補完設定

### 補完設定のベストプラクティス

- カスタム補完を追加
- 大文字小文字を区別しない
- 候補をハイライト表示
- メニュー選択を有効化

### 補完設定例

```zsh
# ~/.zshrc または ~/.zsh/completions/config.zsh

# 基本的な補完設定
autoload -Uz compinit && compinit

# 大文字小文字を区別しない
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# 色付きの補完
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# メニュー選択を有効化
zstyle ':completion:*' menu select

# 候補をグループ化
zstyle ':completion:*' group-name ''

# グループ名を表示
zstyle ':completion:*:descriptions' format '%F{yellow}-- %d --%f'

# カスタム補完の追加
fpath=(~/.zsh/completions $fpath)
```

## 7. 環境変数の管理

### 環境変数設定のベストプラクティス

- `.zshenv`に基本的な環境変数を設定
- `.zprofile`に特定のログインシェル環境変数を設定
- プロジェクト固有の環境変数は別ファイルで管理
- 機密情報は環境変数で管理し、バージョン管理しない

### 環境変数設定例

```zsh
# ~/.zshenv
export LANG=ja_JP.UTF-8
export EDITOR=vim
export VISUAL=vim
export PAGER=less
export LESS='-R'

# PATH設定
typeset -U path
path=(
    $HOME/bin
    /usr/local/bin
    /usr/bin
    /bin
    $path
)

# プロジェクト固有の環境変数
if [[ -f ~/.env/project.zsh ]]; then
    source ~/.env/project.zsh
fi
```

## 8. パフォーマンス最適化

### パフォーマンス最適化のベストプラクティス

- 遅延ロードを活用
- 不要なプラグインを削除
- 起動時の読み込みを最小限に
- プロファイリングでボトルネックを特定

### パフォーマンス最適化例

```zsh
# ~/.zshrc

# 遅延ロードの例（zinit使用）
zinit ice wait lucid
zinit light zsh-users/zsh-completions

# 重いコマンドの遅延ロード
if (( $+commands[kubectl] )); then
    kubectl() {
        unfunction kubectl
        source <(kubectl completion zsh)
        kubectl "$@"
    }
fi

# 起動時間の計測
if [[ "$PROFILE_STARTUP" == true ]]; then
    zmodload zsh/zprof
    zprof
fi
```

## 9. セキュリティ設定

### セキュリティ設定のベストプラクティス

- 履歴ファイルのパーミッション設定
- 機密情報は環境変数またはパスワードマネージャーで管理
- ファイル作成時のデフォルトパーミッション設定
- SSH鍵の適切な管理

### セキュリティ設定例

```zsh
# ~/.zshrc

# ヒストリファイルのパーミッション設定
[[ -f ~/.zsh_history ]] && chmod 600 ~/.zsh_history

# umaskの設定（新規ファイルのデフォルトパーミッション）
umask 022

# SSH鍵の自動追加
if [[ -z "$SSH_AUTH_SOCK" ]] && (( $+commands[ssh-agent] )); then
    eval "$(ssh-agent -s)" > /dev/null
    ssh-add ~/.ssh/id_rsa 2> /dev/null
fi

# 機密情報の読み込み（バージョン管理しないファイル）
[[ -f ~/.zsh/secrets.zsh ]] && source ~/.zsh/secrets.zsh
```

## 10. トラブルシューティング

### トラブルシューティングのベストプラクティス

- デバッグモードを活用
- エラーメッセージを適切に表示
- ログ出力を実装
- 設定ファイルのバックアップを保持

### トラブルシューティング例

```zsh
# ~/.zshrc

# デバッグモード
if [[ "$DEBUG_ZSH" == true ]]; then
    set -x
    setopt verbose
fi

# エラーメッセージをわかりやすく表示
zmodload zsh/system
function error_handler() {
    echo "Error $? occurred at $1:$2" >&2
}
trap 'error_handler "${funcfiletrace[1]%:*}" "${funcfiletrace[1]#*:}"' ERR

# 設定ファイルのバックアップ
function backup_zsh_config() {
    local backup_dir="$HOME/.zsh_backup/$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$backup_dir"
    cp ~/.zshrc ~/.zshenv ~/.zprofile "$backup_dir/"
    echo "Backup created at $backup_dir"
}
```
