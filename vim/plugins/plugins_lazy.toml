# ÈÅÖÂª∂Ë™≠„ÅøËæº„Åø„Éó„É©„Ç∞„Ç§„É≥

[[plugins]]
repo = 'tyru/eskk.vim'
on_event = 'VimEnter'
hook_add = '''
  if has('vim_starting')
    if has('win32') || has('win64')
       let s:dict = expand($HOME.'\vimfiles\dict')
    else
       let s:dict = expand('~/.vim/dict')
    endif

    let g:eskk#marker_henkan = "üí¨"
    let g:eskk#marker_henkan_select = "‚úÖ"
    let g:eskk#marker_jisyo_touroku = "üìñ"
    let g:eskk#egg_like_newline = 1
    let g:eskk#dictionary = { 'path': s:dict.'/SKK-JISYO.user', 'sorted': 0, 'encoding': 'utf-8' }
    let g:eskk#large_dictionary = { 'path': s:dict.'/SKK-JISYO.L', 'sorted': 1,	'encoding': 'euc-jp' }

    augroup eskk
      autocmd!
      autocmd User eskk-enable-post lmap <buffer> l <Plug>(eskk:disable)
    augroup END

    imap <C-J> <Plug>(eskk:toggle)
    cmap <C-J> <Plug>(eskk:toggle)
    nmap <C-J> i<Plug>(eskk:toggle)
    imap JJ <Plug>(eskk:toggle)
    nmap <space>j i<Plug>(eskk:toggle)
  endif
'''

[[plugins]]
repo = 'koron/dicwin-vim'
on_event = 'VimEnter'
hook_source = '''
  let g:dicwin_mapleader = "\<C-k>"
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'tyru/urilib.vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_event = 'VimEnter'
hook_source = '''
  nnoremap <silent> <space>b "zyiw:let @/ =  @z<CR>:set hlsearch<CR>:OpenBrowserSmartSearch<Space><C-r>/<CR>
  vnoremap <silent> <space>b "zy:let @/ = @z<CR>:set hlsearch<CR>:OpenBrowserSmartSearch<Space><C-r>/<CR>
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_event = 'VimEnter'
hook_source = '''
  nnoremap <silent> <space>R :Qfreplace<CR>
'''

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
on_ft = ['md','markdown']

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['md','markdown']

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['ts', 'typescript']

[[plugins]]
repo = 'peitalin/vim-jsx-typescript'
on_ft = ['ts', 'typescript']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['conf', 'toml']

[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = ['kt', 'kotlin']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['asp', 'aspx', 'erb', 'html', 'jsp', 'jsx', 'php', 'svelte', 'tsx', 'vue', 'xhtml', 'xml']

[[plugins]]
repo = 'evanleck/vim-svelte'
on_ft = ['svelte']

[[plugins]]
repo = 'mattn/webapi-vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'mattn/gist-vim'
depends = 'mattn/webapi-vim'
on_cmd = 'Gist'

[[plugins]]
repo = 'shinchu/hz_ja.vim'
on_event = 'VimEnter'

# LSPÈñ¢ÈÄ£
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_event = 'VimEnter'
hook_source = '''
  function! s:on_lsp_buffer_enabled() abort
      setlocal omnifunc=lsp#complete
      setlocal signcolumn=yes
      if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
      nmap <buffer> gd <plug>(lsp-definition)
      nmap <buffer> gs <plug>(lsp-document-symbol-search)
      nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
      nmap <buffer> gr <plug>(lsp-references)
      nmap <buffer> gi <plug>(lsp-implementation)
      nmap <buffer> gt <plug>(lsp-type-definition)
      nmap <buffer> <leader>rn <plug>(lsp-rename)
      nmap <buffer> [g <plug>(lsp-previous-diagnostic)
      nmap <buffer> ]g <plug>(lsp-next-diagnostic)
      nmap <buffer> K <plug>(lsp-hover)
      nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
      nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

      let g:lsp_format_sync_timeout = 1000
      autocmd! BufWritePre *.ts,*.js call execute('LspDocumentFormatSync')
  endfunction

  augroup lsp_install
      au!
      autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_event = 'VimEnter'
hook_source = '''
'''

[[plugins]]
repo = 'mattn/vim-lsp-icons'
on_event = 'VimEnter'
