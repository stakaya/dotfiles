# ÈÅÖÂª∂Ë™≠„ÅøËæº„Åø„Éó„É©„Ç∞„Ç§„É≥

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
  if executable('rg')
	let g:unite_source_grep_command = 'rg'
	let g:unite_source_grep_default_opts = '-n --no-heading --color never'
	let g:unite_source_grep_recursive_opt = ''
  endif
'''

[[plugins]]
repo = 'Shougo/vimfiler'
depends = 'Shougo/unite.vim'
on_cmd = ['VimFilerExplorer', 'VimFilerBufferDir', 'VimFiler']
hook_add = '''
  let g:vimfiler_as_default_explorer=1
  let g:vimfiler_safe_mode_by_default=0
  let g:netrw_liststyle=3
  nnoremap <silent> <space>e :VimFilerExplorer<CR>
'''

[[plugins]]
repo = 'andymass/vim-matchup'
on_event = 'WinEnter'

[[plugins]]
repo = 'tomtom/tcomment_vim'
on_map = ['<D-/>', '<C-_>']
hook_add = '''
  nnoremap <silent> <D-/> :TComment<CR>
  nnoremap <silent> <C-_> :TComment<CR>
  vnoremap <silent> <D-/> :TComment<CR>
  vnoremap <silent> <C-_> :TComment<CR>
'''

[[plugins]]
repo = 'tpope/vim-abolish'
on_map = ['*'] # This might be too broad, consider specific command or function if available
hook_add = '''
  nnoremap <silent>* "zyiw:let @/ = @z<CR>:S/<C-r>/<CR>
  vnoremap <silent>* "zy:let @/ = @z<CR>:S/<C-r>/<CR>
'''

[[plugins]]
repo = 'tpope/vim-surround'
on_map = ['ys', 'cs', 'ds', 'S'] # S in visual mode

[[plugins]]
repo = 'github/copilot.vim'
on_event = ['InsertEnter', 'BufReadPre'] # BufReadPre to enable for existing files
on_cmd = ['Copilot', 'CopilotPanel']
hook_add = '''
  let g:copilot_no_tab_map = v:true
  imap <silent><script><expr> <C-Y> copilot#Accept("\<CR>")
'''

[[plugins]]
repo = 'tyru/eskk.vim'
on_event = 'VimEnter'
hook_add = '''
  if has('vim_starting')
    if has('win32') || has('win64')
       let s:dict = expand($HOME.'\vimfiles\dict')
    else
       let s:dict = expand('~/.vim/dict')
    endif

    let g:eskk#marker_henkan = "üí¨"
    let g:eskk#marker_henkan_select = "‚úÖ"
    let g:eskk#marker_jisyo_touroku = "üìñ"
    let g:eskk#egg_like_newline = 1
    let g:eskk#dictionary = { 'path': s:dict.'/SKK-JISYO.user', 'sorted': 0, 'encoding': 'utf-8' }
    let g:eskk#large_dictionary = { 'path': s:dict.'/SKK-JISYO.L', 'sorted': 1,	'encoding': 'euc-jp' }

    augroup eskk
      autocmd!
      autocmd User eskk-enable-post lmap <buffer> l <Plug>(eskk:disable)
    augroup END

    imap <C-J> <Plug>(eskk:toggle)
    cmap <C-J> <Plug>(eskk:toggle)
    nmap <C-J> i<Plug>(eskk:toggle)
    imap JJ <Plug>(eskk:toggle)
    nmap <space>j i<Plug>(eskk:toggle)
  endif
'''

[[plugins]]
repo = 'koron/dicwin-vim'
on_event = 'VimEnter'
hook_source = '''
  let g:dicwin_mapleader = "\<C-k>"
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'tyru/urilib.vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_event = 'VimEnter'
hook_source = '''
  nnoremap <silent> <space>b "zyiw:let @/ =  @z<CR>:set hlsearch<CR>:OpenBrowserSmartSearch<Space><C-r>/<CR>
  vnoremap <silent> <space>b "zy:let @/ = @z<CR>:set hlsearch<CR>:OpenBrowserSmartSearch<Space><C-r>/<CR>
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_event = 'VimEnter'
hook_source = '''
  nnoremap <silent> <space>R :Qfreplace<CR>
'''

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
on_ft = ['md','markdown']

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['md','markdown']

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['ts', 'typescript']

[[plugins]]
repo = 'peitalin/vim-jsx-typescript'
on_ft = ['ts', 'typescript']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['conf', 'toml']

[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = ['kt', 'kotlin']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['asp', 'aspx', 'erb', 'html', 'jsp', 'jsx', 'php', 'svelte', 'tsx', 'vue', 'xhtml', 'xml']

[[plugins]]
repo = 'evanleck/vim-svelte'
on_ft = ['svelte']

[[plugins]]
repo = 'mattn/webapi-vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'mattn/gist-vim'
depends = 'mattn/webapi-vim'
on_cmd = 'Gist'

[[plugins]]
repo = 'madox2/vim-ai'
on_event = 'VimEnter'
hook_source = '''
  let g:vim_ai_token_file_path = '~/.config/openai.token'
  xnoremap <silent> <space>ai :AI<CR>
  xnoremap <silent> <space>fix :AIEdit fix grammar and spelling<CR>
  xnoremap <space>edit :AIEdit<space>
  xnoremap <silent> <space><CR> :AIChat<CR>
  nnoremap <silent> <space><CR> :AIChat<CR>
  nnoremap <silent> <space>img :AIImage<space>
  xnoremap <silent> <space>img :AIImage<CR>

  " custom command suggesting git commit message, takes no arguments
  function! GitCommitMessageFn()
    let l:range = 0
    let l:diff = system('git --no-pager diff')
    let l:prompt = "generate a short commit message from the diff below:\n" . l:diff
    let l:config = {
    \  "options": {
    \    "model": "gpt-4o",
    \    "initial_prompt": ">>> system\nyou are a code assistant",
    \    "temperature": 1,
    \  },
    \}
    call vim_ai#AIRun(l:range, l:config, l:prompt)
  endfunction
  command! GitCommitMessage call GitCommitMessageFn()

  " custom command that provides a code review for selected code block
  function! CodeReviewFn(range) range
    let l:prompt = "programming syntax is " . &filetype . ", review the code below:\n" . "„É¨„Éì„É•„Éº„ÅÆË®ÄË™û„ÅØÊó•Êú¨Ë™û„Åß„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô„ÄÇ\n"
    let l:config = {
    \  "options": {
    \    "initial_prompt": ">>> system\nyou are a clean code expert",
    \  },
    \}
    exe a:firstline.",".a:lastline . "call vim_ai#AIChatRun(a:range, l:config, l:prompt)"
  endfunction
  command! -range -nargs=? AICodeReview <line1>,<line2>call CodeReviewFn(<range>)
'''

[[plugins]]
repo = 'shinchu/hz_ja.vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_event = 'VimEnter'
hook_source = '''
  let g:lsp_diagnostics_echo_cursor = 1

  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> <space>rn <plug>(lsp-rename)
    nnoremap <silent> <space>== :LspDocumentFormat<CR>
  endfunction

  augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_event = 'VimEnter'
hook_add = '''
  let g:lsp_settings = {
  \  'pylsp-all': {
  \    'workspace_config': {
  \      'pylsp': {
  \        'configurationSources': ['flake8'],
  \        'plugins': {
  \          'flake8': {
  \            'enabled': 1
  \          },
  \          'mccabe': {
  \            'enabled': 0
  \          },
  \          'pycodestyle': {
  \            'enabled': 0
  \          },
  \          'pyflakes': {
  \            'enabled': 0
  \          },
  \        }
  \      }
  \    }
  \  }
  \}
'''

[[plugins]]
repo = 'mattn/vim-lsp-icons'
on_event = 'VimEnter'

[[plugins]]
repo = 'mattn/vim-sonictemplate'
on_event = 'VimEnter'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
on_ft = ['css', 'html', 'java', 'javascript', 'kotlin', 'php', 'python', 'sh', 'svlete', 'swift', 'toml', 'vim']
hook_source = '''
  inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
on_ft = ['css', 'html', 'java', 'javascript', 'kotlin', 'php', 'python', 'sh', 'svlete', 'swift', 'toml', 'vim']
